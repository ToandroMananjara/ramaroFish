generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id                 Int            @id @default(autoincrement())
  name               String         @unique @db.VarChar
  description        String?
  parent_category_id Int?
  categories         categories?    @relation("categoriesTocategories", fields: [parent_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_categories   categories[]   @relation("categoriesTocategories")
  publications       publications[]
}

model companies {
  id              Int               @id @default(autoincrement())
  company_name    String            @unique @db.VarChar
  NIF             String            @unique @db.VarChar
  STAT            String            @unique @db.VarChar
  localisation    String?           @db.VarChar
  created_at      DateTime?         @db.Timestamp(6)
  is_deleted      Boolean?          @default(false)
  company_members company_members[] @ignore
  publications    publications[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model company_members {
  user_id    Int
  company_id Int
  role       String?   @default("member") @db.VarChar
  joined_at  DateTime? @db.Timestamp(6)
  is_deleted Boolean?  @default(false)
  companies  companies @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}

model conversations {
  id                                  Int        @id @default(autoincrement())
  user1_id                            Int
  user2_id                            Int
  last_message_at                     DateTime?  @db.Timestamp(6)
  is_deleted                          Boolean?   @default(false)
  users_conversations_user1_idTousers users      @relation("conversations_user1_idTousers", fields: [user1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_conversations_user2_idTousers users      @relation("conversations_user2_idTousers", fields: [user2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages                            messages[]
}

model followers {
  id                                  Int       @id @default(autoincrement())
  follower_id                         Int
  following_id                        Int
  created_at                          DateTime? @db.Timestamp(6)
  is_deleted                          Boolean?  @default(false)
  users_followers_follower_idTousers  users     @relation("followers_follower_idTousers", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_followers_following_idTousers users     @relation("followers_following_idTousers", fields: [following_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model messages {
  id                                Int           @id @default(autoincrement())
  sender_id                         Int
  receiver_id                       Int
  content                           String
  is_read                           Boolean?      @default(false)
  created_at                        DateTime?     @db.Timestamp(6)
  is_deleted                        Boolean?      @default(false)
  conversation_id                   Int
  conversations                     conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conversation")
  users_messages_receiver_idTousers users         @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_messages_sender_idTousers   users         @relation("messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model notifications {
  id           Int       @id @default(autoincrement())
  user_id      Int
  type         String    @db.VarChar
  reference_id Int?
  is_read      Boolean?  @default(false)
  created_at   DateTime? @db.Timestamp(6)
  is_deleted   Boolean?  @default(false)
  sub_type     String?   @db.VarChar
  users        users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model publication_comments {
  id             Int          @id @default(autoincrement())
  publication_id Int
  user_id        Int
  comment_text   String
  created_at     DateTime?    @db.Timestamp(6)
  is_deleted     Boolean?     @default(false)
  publications   publications @relation(fields: [publication_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model publications {
  id                   Int                    @id @default(autoincrement())
  owner_user_id        Int?
  owner_company_id     Int?
  publication_type     String                 @db.VarChar
  publication_title    String                 @db.VarChar
  content              String
  media                String?                @db.VarChar
  category_id          Int?
  price                Decimal?               @db.Decimal(10, 2)
  initial_stock        Decimal?               @db.Decimal(10, 2)
  current_stock        Decimal?               @db.Decimal(10, 2)
  max_weight           Decimal?               @db.Decimal(10, 2)
  min_weight           Decimal?               @db.Decimal(10, 2)
  devise_type          String?                @default("mga") @db.VarChar
  livraison            Boolean?               @default(false)
  location             String                 @db.VarChar
  status               String?                @default("active") @db.VarChar
  created_at           DateTime?              @db.Timestamp(6)
  updated_at           DateTime?              @db.Timestamp(6)
  is_deleted           Boolean?               @default(false)
  publication_comments publication_comments[]
  categories           categories?            @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  companies            companies?             @relation(fields: [owner_company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                users?                 @relation(fields: [owner_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reactions            reactions[]
  transactions         transactions[]
}

model reactions {
  id             Int          @id @default(autoincrement())
  publication_id Int
  user_id        Int
  reaction_type  String       @default("like") @db.VarChar
  created_at     DateTime?    @db.Timestamp(6)
  is_deleted     Boolean?     @default(false)
  publications   publications @relation(fields: [publication_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reviews {
  id                               Int          @id @default(autoincrement())
  transaction_id                   Int
  reviewer_id                      Int
  reviewee_id                      Int
  rating                           Int
  comment                          String?
  created_at                       DateTime?    @db.Timestamp(6)
  is_deleted                       Boolean?     @default(false)
  users_reviews_reviewee_idTousers users        @relation("reviews_reviewee_idTousers", fields: [reviewee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_reviews_reviewer_idTousers users        @relation("reviews_reviewer_idTousers", fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions                     transactions @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model transactions {
  id                                  Int          @id @default(autoincrement())
  buyer_id                            Int
  seller_id                           Int
  publication_id                      Int
  quantity                            Int?         @default(1)
  total_price                         Decimal      @db.Decimal(10, 2)
  transaction_date                    DateTime     @db.Timestamp(6)
  status                              String?      @default("pending") @db.VarChar
  is_deleted                          Boolean?     @default(false)
  reviews                             reviews[]
  users_transactions_buyer_idTousers  users        @relation("transactions_buyer_idTousers", fields: [buyer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  publications                        publications @relation(fields: [publication_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_transactions_seller_idTousers users        @relation("transactions_seller_idTousers", fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                                          Int                    @id @default(autoincrement())
  username                                    String                 @unique @db.VarChar
  email                                       String                 @unique @db.VarChar
  password                                    String                 @db.VarChar
  created_at                                  DateTime?              @db.Timestamp(6)
  country                                     String?                @db.VarChar
  city                                        String?                @db.VarChar
  company                                     Boolean?               @default(false)
  language                                    String?                @db.VarChar
  profile_picture                             String?                @db.VarChar
  is_deleted                                  Boolean?               @default(false)
  is_premium_user                             Boolean?               @default(false)
  company_members                             company_members[]      @ignore
  conversations_conversations_user1_idTousers conversations[]        @relation("conversations_user1_idTousers")
  conversations_conversations_user2_idTousers conversations[]        @relation("conversations_user2_idTousers")
  followers_followers_follower_idTousers      followers[]            @relation("followers_follower_idTousers")
  followers_followers_following_idTousers     followers[]            @relation("followers_following_idTousers")
  messages_messages_receiver_idTousers        messages[]             @relation("messages_receiver_idTousers")
  messages_messages_sender_idTousers          messages[]             @relation("messages_sender_idTousers")
  notifications                               notifications[]
  publication_comments                        publication_comments[]
  publications                                publications[]
  reactions                                   reactions[]
  reviews_reviews_reviewee_idTousers          reviews[]              @relation("reviews_reviewee_idTousers")
  reviews_reviews_reviewer_idTousers          reviews[]              @relation("reviews_reviewer_idTousers")
  transactions_transactions_buyer_idTousers   transactions[]         @relation("transactions_buyer_idTousers")
  transactions_transactions_seller_idTousers  transactions[]         @relation("transactions_seller_idTousers")
}
